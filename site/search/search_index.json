{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"File Transfer Server API Documentation","text":"<p>Welcome to the File Transfer Server API documentation. This is a modern file transfer service built with FastAPI (Python) backend and React (TypeScript) frontend.</p>"},{"location":"#overview","title":"Overview","text":"<p>The File Transfer Server provides a simple yet powerful API for uploading, downloading, and managing files. It supports both file uploads and text content storage with UUID-based file identification.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>File Upload: Upload files of any type with automatic UUID generation</li> <li>Text Upload: Store text content as files</li> <li>File Download: Download files using unique UUIDs</li> <li>File Management: List and delete files</li> <li>CORS Support: Cross-origin resource sharing enabled</li> <li>Docker Support: Full containerization support for easy deployment</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    HTTP API    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   React Frontend \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  FastAPI Backend \u2502\n\u2502   (TypeScript)   \u2502                \u2502    (Python)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                            \u2502\n                                            \u25bc\n                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                   \u2502  File Storage   \u2502\n                                   \u2502  (uploads/ dir) \u2502\n                                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#technology-stack","title":"Technology Stack","text":""},{"location":"#backend","title":"Backend","text":"<ul> <li>FastAPI: Modern, fast web framework for building APIs</li> <li>Python 3.8+: Programming language</li> <li>Uvicorn: ASGI server for production</li> <li>UUID: For unique file identification</li> </ul>"},{"location":"#frontend","title":"Frontend","text":"<ul> <li>React 18: JavaScript library for building user interfaces</li> <li>TypeScript: Type-safe JavaScript</li> <li>Modern CSS: Responsive design</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run Backend Server <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Run Frontend (in another terminal)    <pre><code>cd frontend\nnpm install\nnpm start\n</code></pre></p> </li> <li> <p>Access the Application</p> </li> <li>Frontend: http://localhost:3000</li> <li>Backend API: http://localhost:8000</li> <li>API Documentation: http://localhost:8000/docs</li> </ol>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<p>The API provides four main endpoints:</p> Method Endpoint Description <code>POST</code> <code>/upload</code> Upload files or text content <code>GET</code> <code>/download/{file_id}</code> Download file by UUID <code>GET</code> <code>/files</code> List all available files <code>DELETE</code> <code>/delete/{file_id}</code> Delete file by UUID"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started Guide - Detailed setup instructions</li> <li>API Reference - Complete API documentation</li> <li>Deployment Guide - Production deployment instructions</li> </ul>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers various deployment options for the File Transfer Server in production environments.</p>"},{"location":"deployment/#docker-hub-deployment-recommended","title":"Docker Hub Deployment (Recommended)","text":""},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your server</li> <li>Docker Hub account</li> <li>Basic understanding of Docker and docker-compose</li> </ul>"},{"location":"deployment/#1-prepare-docker-hub-account","title":"1. Prepare Docker Hub Account","text":"<ol> <li>Register a Docker Hub account</li> <li>Login to Docker Hub locally:    <pre><code>docker login\n</code></pre></li> </ol>"},{"location":"deployment/#2-build-and-push-images","title":"2. Build and Push Images","text":""},{"location":"deployment/#option-a-multi-platform-build-recommended","title":"Option A: Multi-platform Build (Recommended)","text":"<p>Supports building x86 images from ARM64 Macs:</p> <ol> <li> <p>Make the script executable:    <pre><code>chmod +x build-and-push-multiplatform.sh\n</code></pre></p> </li> <li> <p>Build and push multi-platform images:    <pre><code># Build for both ARM64 and x86_64\n./build-and-push-multiplatform.sh your-username\n\n# Or build only x86_64 (suitable for x86 servers)\n./build-and-push-multiplatform.sh your-username latest linux/amd64\n\n# Or specify custom version\n./build-and-push-multiplatform.sh your-username v1.0 linux/amd64,linux/arm64\n</code></pre></p> </li> <li> <p>Verify multi-platform support:    <pre><code>docker buildx imagetools inspect your-username/transfileserver-backend:latest\n</code></pre></p> </li> </ol>"},{"location":"deployment/#option-b-single-platform-build","title":"Option B: Single Platform Build","text":"<ol> <li> <p>Make the script executable:    <pre><code>chmod +x build-and-push.sh\n</code></pre></p> </li> <li> <p>Build and push images:    <pre><code>./build-and-push.sh your-username\n</code></pre></p> </li> </ol> <p>Or manually:    <pre><code># Build images\ndocker build -t your-username/transfileserver-backend:latest .\ndocker build -t your-username/transfileserver-frontend:latest ./frontend\n\n# Push images\ndocker push your-username/transfileserver-backend:latest\ndocker push your-username/transfileserver-frontend:latest\n</code></pre></p>"},{"location":"deployment/#3-server-deployment","title":"3. Server Deployment","text":"<ol> <li> <p>Create project directory on server:    <pre><code>mkdir transfileserver &amp;&amp; cd transfileserver\n</code></pre></p> </li> <li> <p>Download production configuration:    <pre><code>wget https://raw.githubusercontent.com/your-repo/transfileserver/main/docker-compose.prod.yml\n</code></pre></p> </li> <li> <p>Edit configuration file:    <pre><code>nano docker-compose.prod.yml\n</code></pre></p> </li> </ol> <p>Update the following:    - <code>zata/transfileserver-backend:latest</code> \u2192 <code>your-dockerhub-username/transfileserver-backend:latest</code>    - <code>zata/transfileserver-frontend:latest</code> \u2192 <code>your-dockerhub-username/transfileserver-frontend:latest</code>    - <code>&lt;backend-port&gt;</code> \u2192 Your desired backend port (e.g., 8000)    - <code>&lt;frontend-port&gt;</code> \u2192 Your desired frontend port (e.g., 80)    - <code>&lt;backend-port&gt;</code> in REACT_APP_API_URL \u2192 Same as backend port above</p> <p>Important: Ensure <code>REACT_APP_API_URL</code> contains a URL accessible from user browsers:    - If using domain: <code>http://your-domain.com:8000</code>    - If using IP: <code>http://your-server-ip:8000</code>    - If local testing: <code>http://localhost:8000</code></p> <ol> <li> <p>Start services:    <pre><code>docker-compose -f docker-compose.prod.yml up -d\n</code></pre></p> </li> <li> <p>Check status:    <pre><code>docker-compose -f docker-compose.prod.yml ps\ndocker-compose -f docker-compose.prod.yml logs\n</code></pre></p> </li> </ol>"},{"location":"deployment/#4-domain-and-reverse-proxy-optional","title":"4. Domain and Reverse Proxy (Optional)","text":"<p>If using a domain, configure Nginx reverse proxy:</p> <pre><code>server {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:80;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /api/ {\n        proxy_pass http://localhost:8000/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"deployment/#5-update-deployment","title":"5. Update Deployment","text":"<p>When code is updated:</p> <ol> <li> <p>Rebuild and push images:    <pre><code>./build-and-push.sh your-username\n</code></pre></p> </li> <li> <p>Pull latest images and restart on server:    <pre><code>docker-compose -f docker-compose.prod.yml pull\ndocker-compose -f docker-compose.prod.yml up -d\n</code></pre></p> </li> </ol>"},{"location":"deployment/#environment-variables","title":"Environment Variables","text":""},{"location":"deployment/#frontend-environment-variables","title":"Frontend Environment Variables","text":"<p>The frontend image supports runtime environment variable configuration. The <code>REACT_APP_API_URL</code> environment variable is dynamically replaced in the built JavaScript files when the container starts.</p> <p>Important Notes: - Frontend runs in user browsers, so API URL must be browser-accessible - Cannot use Docker internal service names (e.g., <code>http://backend:8000</code>) - Must use externally accessible addresses</p>"},{"location":"deployment/#using-env-files","title":"Using .env Files","text":"<p>Create a <code>.env</code> file to manage environment variables:</p> <pre><code>DOCKERHUB_USERNAME=your-username\nSERVER_DOMAIN=your-domain.com\nBACKEND_PORT=8000\nFRONTEND_PORT=80\nAPI_URL=http://your-domain.com:8000\n</code></pre> <p>Then use in <code>docker-compose.prod.yml</code>: <pre><code>services:\n  backend:\n    image: ${DOCKERHUB_USERNAME}/transfileserver-backend:latest\n    ports:\n      - \\\"${BACKEND_PORT}:8000\\\"\n\n  frontend:\n    image: ${DOCKERHUB_USERNAME}/transfileserver-frontend:latest\n    ports:\n      - \\\"${FRONTEND_PORT}:80\\\"\n    environment:\n      - REACT_APP_API_URL=${API_URL}\n</code></pre></p>"},{"location":"deployment/#manual-deployment","title":"Manual Deployment","text":""},{"location":"deployment/#backend-deployment","title":"Backend Deployment","text":"<ol> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create systemd service file <code>/etc/systemd/system/transfileserver.service</code>:    <pre><code>[Unit]\nDescription=Transfer File Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nWorkingDirectory=/path/to/transfileserver\nExecStart=/usr/bin/python3 -m uvicorn main:app --host 0.0.0.0 --port 8000\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p>Start and enable service:    <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable transfileserver\nsudo systemctl start transfileserver\n</code></pre></p> </li> </ol>"},{"location":"deployment/#frontend-deployment","title":"Frontend Deployment","text":"<ol> <li> <p>Build the frontend:    <pre><code>cd frontend\nnpm install\nnpm run build\n</code></pre></p> </li> <li> <p>Configure Nginx:    <pre><code>server {\n    listen 80;\n    server_name your-domain.com;\n    root /path/to/transfileserver/frontend/build;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /api/ {\n        proxy_pass http://localhost:8000/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#production-security-checklist","title":"Production Security Checklist","text":"<ol> <li> <p>Restrict CORS Origins:    <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\\\"https://your-domain.com\\\"],\n    allow_credentials=True,\n    allow_methods=[\\\"GET\\\", \\\"POST\\\", \\\"DELETE\\\"],\n    allow_headers=[\\\"*\\\"],\n)\n</code></pre></p> </li> <li> <p>Add Authentication:</p> </li> <li>Implement API keys or JWT tokens</li> <li> <p>Add user authorization for file operations</p> </li> <li> <p>File Security:</p> </li> <li>Validate file types before upload</li> <li>Implement file size limits</li> <li> <p>Scan files for malware</p> </li> <li> <p>Rate Limiting:</p> </li> <li>Add rate limiting to prevent abuse</li> <li> <p>Implement request quotas per user/IP</p> </li> <li> <p>HTTPS Configuration:</p> </li> <li>Use SSL/TLS certificates</li> <li>Redirect HTTP to HTTPS</li> </ol>"},{"location":"deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/#health-checks","title":"Health Checks","text":"<p>Add health check endpoints to monitor service status:</p> <pre><code>@app.get(\\\"/health\\\")\nasync def health_check():\n    return {\\\"status\\\": \\\"healthy\\\", \\\"timestamp\\\": datetime.now().isoformat()}\n</code></pre>"},{"location":"deployment/#logging-configuration","title":"Logging Configuration","text":"<p>Configure structured logging for production:</p> <pre><code>import logging\nfrom datetime import datetime\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('app.log'),\n        logging.StreamHandler()\n    ]\n)\n</code></pre>"},{"location":"deployment/#docker-monitoring","title":"Docker Monitoring","text":"<p>Monitor Docker containers:</p> <pre><code># View container logs\ndocker-compose logs -f\n\n# Monitor resource usage\ndocker stats\n\n# Check container health\ndocker-compose ps\n</code></pre>"},{"location":"deployment/#scaling","title":"Scaling","text":""},{"location":"deployment/#load-balancing","title":"Load Balancing","text":"<p>For high-traffic scenarios, use a load balancer:</p> <pre><code>upstream backend {\n    server backend1:8000;\n    server backend2:8000;\n    server backend3:8000;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://backend;\n    }\n}\n</code></pre>"},{"location":"deployment/#database-integration","title":"Database Integration","text":"<p>For scalability, consider using a database for file metadata:</p> <pre><code>from sqlalchemy import create_engine, Column, String, Integer, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass FileMetadata(Base):\n    __tablename__ = \\\"files\\\"\n\n    id = Column(String, primary_key=True)\n    filename = Column(String)\n    size = Column(Integer)\n    created_at = Column(DateTime)\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-issues","title":"Common Issues","text":"<ol> <li>Image push failures: Check Docker Hub login status</li> <li>Service startup failures: Check port conflicts and permissions</li> <li>File upload failures: Verify uploads directory permissions</li> <li>Frontend API connection issues: Verify REACT_APP_API_URL configuration</li> </ol>"},{"location":"deployment/#debug-commands","title":"Debug Commands","text":"<pre><code># Check service logs\ndocker-compose logs backend\ndocker-compose logs frontend\n\n# Test API connectivity\ncurl -X GET http://localhost:8000/files\n\n# Check file permissions\nls -la uploads/\n\n# Monitor system resources\nhtop\ndf -h\n</code></pre>"},{"location":"deployment/#advantages-of-docker-deployment","title":"Advantages of Docker Deployment","text":"<ul> <li>\u2705 Fast deployment without server-side building</li> <li>\u2705 Easy version management</li> <li>\u2705 Scalable to multiple servers</li> <li>\u2705 Supports automated CI/CD</li> <li>\u2705 Consistent environments across development and production</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of how to use the File Transfer Server API in different scenarios.</p>"},{"location":"examples/#basic-file-operations","title":"Basic File Operations","text":""},{"location":"examples/#upload-and-download-workflow","title":"Upload and Download Workflow","text":"<pre><code>import requests\nimport os\n\n# 1. Upload a file\ndef upload_file(file_path):\n    url = \"http://localhost:8000/upload\"\n    with open(file_path, 'rb') as file:\n        files = {'file': file}\n        response = requests.post(url, files=files)\n        return response.json()\n\n# 2. Download a file\ndef download_file(file_id, output_path):\n    url = f\"http://localhost:8000/download/{file_id}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        with open(output_path, 'wb') as file:\n            file.write(response.content)\n        return True\n    return False\n\n# Example usage\nresult = upload_file(\"example.txt\")\nfile_id = result['file_id']\nprint(f\"File uploaded with ID: {file_id}\")\n\nif download_file(file_id, \"downloaded_example.txt\"):\n    print(\"File downloaded successfully\")\n</code></pre>"},{"location":"examples/#text-content-management","title":"Text Content Management","text":"<pre><code>import requests\n\n# Upload text content\ndef upload_text(content):\n    url = \"http://localhost:8000/upload\"\n    data = {'text': content}\n    response = requests.post(url, data=data)\n    return response.json()\n\n# Download text content\ndef download_text(file_id):\n    url = f\"http://localhost:8000/download/{file_id}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    return None\n\n# Example usage\ntext_content = \"This is a sample text content\"\nresult = upload_text(text_content)\nfile_id = result['file_id']\n\ndownloaded_text = download_text(file_id)\nprint(f\"Downloaded text: {downloaded_text}\")\n</code></pre>"},{"location":"examples/#web-browser-integration","title":"Web Browser Integration","text":""},{"location":"examples/#html-file-upload-form","title":"HTML File Upload Form","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;File Upload&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;File Upload&lt;/h1&gt;\n\n    &lt;form id=\"uploadForm\" enctype=\"multipart/form-data\"&gt;\n        &lt;div&gt;\n            &lt;label&gt;Upload File:&lt;/label&gt;\n            &lt;input type=\"file\" id=\"fileInput\" name=\"file\"&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Or Enter Text:&lt;/label&gt;\n            &lt;textarea id=\"textInput\" name=\"text\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;div id=\"result\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        document.getElementById('uploadForm').addEventListener('submit', async (e) =&gt; {\n            e.preventDefault();\n\n            const formData = new FormData();\n            const fileInput = document.getElementById('fileInput');\n            const textInput = document.getElementById('textInput');\n\n            if (fileInput.files.length &gt; 0) {\n                formData.append('file', fileInput.files[0]);\n            } else if (textInput.value.trim()) {\n                formData.append('text', textInput.value);\n            } else {\n                alert('Please select a file or enter text');\n                return;\n            }\n\n            try {\n                const response = await fetch('http://localhost:8000/upload', {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const result = await response.json();\n                document.getElementById('result').innerHTML = \n                    `&lt;p&gt;Upload successful! File ID: ${result.file_id}&lt;/p&gt;`;\n            } catch (error) {\n                document.getElementById('result').innerHTML = \n                    `&lt;p&gt;Error: ${error.message}&lt;/p&gt;`;\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/#javascript-file-manager","title":"JavaScript File Manager","text":"<pre><code>class FileManager {\n    constructor(apiUrl = 'http://localhost:8000') {\n        this.apiUrl = apiUrl;\n    }\n\n    async uploadFile(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const response = await fetch(`${this.apiUrl}/upload`, {\n            method: 'POST',\n            body: formData\n        });\n\n        return await response.json();\n    }\n\n    async uploadText(text) {\n        const formData = new FormData();\n        formData.append('text', text);\n\n        const response = await fetch(`${this.apiUrl}/upload`, {\n            method: 'POST',\n            body: formData\n        });\n\n        return await response.json();\n    }\n\n    async downloadFile(fileId) {\n        const response = await fetch(`${this.apiUrl}/download/${fileId}`);\n        return await response.blob();\n    }\n\n    async listFiles() {\n        const response = await fetch(`${this.apiUrl}/files`);\n        return await response.json();\n    }\n\n    async deleteFile(fileId) {\n        const response = await fetch(`${this.apiUrl}/delete/${fileId}`, {\n            method: 'DELETE'\n        });\n        return await response.json();\n    }\n}\n\n// Usage example\nconst fileManager = new FileManager();\n\n// Upload and manage files\nasync function example() {\n    // Upload text\n    const textResult = await fileManager.uploadText(\"Hello, World!\");\n    console.log('Text uploaded:', textResult);\n\n    // List all files\n    const files = await fileManager.listFiles();\n    console.log('Available files:', files);\n\n    // Download a file\n    const blob = await fileManager.downloadFile(textResult.file_id);\n    console.log('Downloaded file size:', blob.size);\n\n    // Delete a file\n    const deleteResult = await fileManager.deleteFile(textResult.file_id);\n    console.log('Delete result:', deleteResult);\n}\n</code></pre>"},{"location":"examples/#command-line-tools","title":"Command Line Tools","text":""},{"location":"examples/#bash-script-for-file-operations","title":"Bash Script for File Operations","text":"<pre><code>#!/bin/bash\n\nAPI_URL=\"http://localhost:8000\"\n\n# Function to upload a file\nupload_file() {\n    local file_path=\"$1\"\n    if [ ! -f \"$file_path\" ]; then\n        echo \"File not found: $file_path\"\n        return 1\n    fi\n\n    curl -X POST \"$API_URL/upload\" -F \"file=@$file_path\"\n}\n\n# Function to upload text\nupload_text() {\n    local text=\"$1\"\n    curl -X POST \"$API_URL/upload\" -F \"text=$text\"\n}\n\n# Function to download a file\ndownload_file() {\n    local file_id=\"$1\"\n    local output_path=\"$2\"\n    curl -X GET \"$API_URL/download/$file_id\" -o \"$output_path\"\n}\n\n# Function to list files\nlist_files() {\n    curl -X GET \"$API_URL/files\" | jq '.'\n}\n\n# Function to delete a file\ndelete_file() {\n    local file_id=\"$1\"\n    curl -X DELETE \"$API_URL/delete/$file_id\"\n}\n\n# Example usage\necho \"Uploading file...\"\nUPLOAD_RESULT=$(upload_file \"example.txt\")\nFILE_ID=$(echo $UPLOAD_RESULT | jq -r '.file_id')\n\necho \"File uploaded with ID: $FILE_ID\"\n\necho \"Listing files...\"\nlist_files\n\necho \"Downloading file...\"\ndownload_file \"$FILE_ID\" \"downloaded_example.txt\"\n\necho \"Deleting file...\"\ndelete_file \"$FILE_ID\"\n</code></pre>"},{"location":"examples/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"examples/#batch-file-processing","title":"Batch File Processing","text":"<pre><code>import requests\nimport os\nimport concurrent.futures\nfrom pathlib import Path\n\nclass BatchFileManager:\n    def __init__(self, api_url=\"http://localhost:8000\"):\n        self.api_url = api_url\n\n    def upload_file(self, file_path):\n        \"\"\"Upload a single file\"\"\"\n        url = f\"{self.api_url}/upload\"\n        with open(file_path, 'rb') as file:\n            files = {'file': file}\n            response = requests.post(url, files=files)\n            return {\n                'file_path': file_path,\n                'result': response.json(),\n                'success': response.status_code == 200\n            }\n\n    def upload_directory(self, directory_path, max_workers=5):\n        \"\"\"Upload all files in a directory\"\"\"\n        directory = Path(directory_path)\n        if not directory.exists():\n            raise ValueError(f\"Directory not found: {directory_path}\")\n\n        files = [f for f in directory.rglob('*') if f.is_file()]\n        results = []\n\n        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n            future_to_file = {\n                executor.submit(self.upload_file, file_path): file_path \n                for file_path in files\n            }\n\n            for future in concurrent.futures.as_completed(future_to_file):\n                result = future.result()\n                results.append(result)\n\n                if result['success']:\n                    print(f\"\u2713 Uploaded: {result['file_path']}\")\n                else:\n                    print(f\"\u2717 Failed: {result['file_path']}\")\n\n        return results\n\n    def cleanup_old_files(self, keep_recent=10):\n        \"\"\"Delete old files, keeping only the most recent ones\"\"\"\n        response = requests.get(f\"{self.api_url}/files\")\n        if response.status_code != 200:\n            return False\n\n        files = response.json()['files']\n\n        # Sort by file_id (UUID contains timestamp information)\n        files.sort(key=lambda x: x['file_id'])\n\n        # Delete old files\n        files_to_delete = files[:-keep_recent] if len(files) &gt; keep_recent else []\n\n        for file_info in files_to_delete:\n            delete_response = requests.delete(f\"{self.api_url}/delete/{file_info['file_id']}\")\n            if delete_response.status_code == 200:\n                print(f\"Deleted: {file_info['filename']}\")\n\n        return True\n\n# Example usage\nbatch_manager = BatchFileManager()\n\n# Upload all files in a directory\nresults = batch_manager.upload_directory(\"./documents\")\nprint(f\"Uploaded {sum(1 for r in results if r['success'])} files\")\n\n# Cleanup old files\nbatch_manager.cleanup_old_files(keep_recent=5)\n</code></pre>"},{"location":"examples/#file-synchronization","title":"File Synchronization","text":"<pre><code>import requests\nimport hashlib\nimport os\nfrom pathlib import Path\n\nclass FileSynchronizer:\n    def __init__(self, api_url=\"http://localhost:8000\"):\n        self.api_url = api_url\n\n    def get_file_hash(self, file_path):\n        \"\"\"Calculate MD5 hash of a file\"\"\"\n        hash_md5 = hashlib.md5()\n        with open(file_path, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash_md5.update(chunk)\n        return hash_md5.hexdigest()\n\n    def sync_file(self, local_path, remote_file_id=None):\n        \"\"\"Sync a local file with the remote server\"\"\"\n        if not os.path.exists(local_path):\n            if remote_file_id:\n                # Download from remote\n                return self.download_file(remote_file_id, local_path)\n            else:\n                print(f\"File not found: {local_path}\")\n                return False\n\n        # Upload to remote\n        return self.upload_file(local_path)\n\n    def upload_file(self, file_path):\n        \"\"\"Upload file to server\"\"\"\n        url = f\"{self.api_url}/upload\"\n        with open(file_path, 'rb') as file:\n            files = {'file': file}\n            response = requests.post(url, files=files)\n            return response.json() if response.status_code == 200 else None\n\n    def download_file(self, file_id, output_path):\n        \"\"\"Download file from server\"\"\"\n        url = f\"{self.api_url}/download/{file_id}\"\n        response = requests.get(url)\n        if response.status_code == 200:\n            with open(output_path, 'wb') as file:\n                file.write(response.content)\n            return True\n        return False\n\n# Example usage\nsync = FileSynchronizer()\n\n# Sync a local file\nresult = sync.sync_file(\"important_document.pdf\")\nif result:\n    print(f\"File synced with ID: {result['file_id']}\")\n</code></pre> <p>These examples demonstrate various ways to integrate with the File Transfer Server API, from simple file operations to complex batch processing and synchronization scenarios.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and run the File Transfer Server on your local machine or in production.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Node.js 14 or higher (for frontend development)</li> <li>4GB RAM minimum</li> <li>10GB free disk space</li> </ul>"},{"location":"getting-started/#tools","title":"Tools","text":"<ul> <li>Git (for cloning the repository)</li> <li>Text editor or IDE</li> <li>Terminal/Command prompt</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone &lt;repository-url&gt;\ncd transFileServer\n</code></pre>"},{"location":"getting-started/#2-backend-setup","title":"2. Backend Setup","text":""},{"location":"getting-started/#option-a-using-pip-recommended","title":"Option A: Using pip (Recommended)","text":"<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Verify installation\npython -c \"import fastapi; print('FastAPI installed successfully')\"\n</code></pre>"},{"location":"getting-started/#option-b-using-pip-with-editable-install","title":"Option B: Using pip with editable install","text":"<pre><code># Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/#3-frontend-setup","title":"3. Frontend Setup","text":"<pre><code># Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Verify installation\nnpm list react\n</code></pre>"},{"location":"getting-started/#running-the-application","title":"Running the Application","text":""},{"location":"getting-started/#development-mode","title":"Development Mode","text":""},{"location":"getting-started/#start-the-backend-server","title":"Start the Backend Server","text":"<pre><code># From the project root directory\npython main.py\n</code></pre> <p>The backend will start on <code>http://localhost:8000</code></p>"},{"location":"getting-started/#start-the-frontend-server","title":"Start the Frontend Server","text":"<pre><code># In a new terminal, navigate to frontend directory\ncd frontend\n\n# Start the development server\nnpm start\n</code></pre> <p>The frontend will start on <code>http://localhost:3000</code></p>"},{"location":"getting-started/#production-mode","title":"Production Mode","text":""},{"location":"getting-started/#using-docker-recommended","title":"Using Docker (Recommended)","text":"<pre><code># Build and run both services\ndocker-compose up -d\n\n# Or for production configuration\ndocker-compose -f docker-compose.prod.yml up -d\n</code></pre>"},{"location":"getting-started/#manual-production-setup","title":"Manual Production Setup","text":"<pre><code># Backend\nuvicorn main:app --host 0.0.0.0 --port 8000\n\n# Frontend (build and serve)\ncd frontend\nnpm run build\n# Serve the build directory with your preferred web server\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#using-the-web-interface","title":"Using the Web Interface","text":"<ol> <li>Open your browser and go to <code>http://localhost:3000</code></li> <li>You'll see the File Transfer Server interface with options to:</li> <li>Upload files by dragging and dropping</li> <li>Upload text content</li> <li>View uploaded files</li> <li>Download files</li> <li>Delete files</li> </ol>"},{"location":"getting-started/#using-the-api","title":"Using the API","text":""},{"location":"getting-started/#upload-a-file","title":"Upload a File","text":"<pre><code>curl -X POST \"http://localhost:8000/upload\" \\\n  -F \"file=@/path/to/your/file.txt\"\n</code></pre>"},{"location":"getting-started/#upload-text-content","title":"Upload Text Content","text":"<pre><code>curl -X POST \"http://localhost:8000/upload\" \\\n  -F \"text=Hello, World!\"\n</code></pre>"},{"location":"getting-started/#list-files","title":"List Files","text":"<pre><code>curl -X GET \"http://localhost:8000/files\"\n</code></pre>"},{"location":"getting-started/#download-a-file","title":"Download a File","text":"<pre><code>curl -X GET \"http://localhost:8000/download/YOUR_FILE_ID\" \\\n  -o downloaded_file.txt\n</code></pre>"},{"location":"getting-started/#delete-a-file","title":"Delete a File","text":"<pre><code>curl -X DELETE \"http://localhost:8000/delete/YOUR_FILE_ID\"\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":""},{"location":"getting-started/#backend","title":"Backend","text":"<ul> <li><code>PORT</code>: Server port (default: 8000)</li> <li><code>UPLOAD_DIR</code>: Directory for file storage (default: uploads/)</li> </ul>"},{"location":"getting-started/#frontend","title":"Frontend","text":"<ul> <li><code>REACT_APP_API_URL</code>: Backend API URL (default: http://localhost:8000)</li> </ul>"},{"location":"getting-started/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"getting-started/#development","title":"Development","text":"<p>Create a <code>.env</code> file in the project root: <pre><code>PORT=8000\nREACT_APP_API_URL=http://localhost:8000\n</code></pre></p>"},{"location":"getting-started/#production","title":"Production","text":"<pre><code>export PORT=8000\nexport REACT_APP_API_URL=https://your-domain.com\n</code></pre>"},{"location":"getting-started/#file-storage","title":"File Storage","text":""},{"location":"getting-started/#storage-location","title":"Storage Location","text":"<p>Files are stored in the <code>uploads/</code> directory with the following structure: <pre><code>uploads/\n\u251c\u2500\u2500 550e8400-e29b-41d4-a716-446655440000_document.pdf\n\u251c\u2500\u2500 6ba7b810-9dad-11d1-80b4-00c04fd430c8_image.png\n\u2514\u2500\u2500 6ba7b811-9dad-11d1-80b4-00c04fd430c8.txt\n</code></pre></p>"},{"location":"getting-started/#file-naming-convention","title":"File Naming Convention","text":"<ul> <li>Regular files: <code>{uuid}_{original_filename}</code></li> <li>Text files: <code>{uuid}.txt</code></li> </ul>"},{"location":"getting-started/#storage-considerations","title":"Storage Considerations","text":"<ul> <li>Files are stored permanently until manually deleted</li> <li>No automatic cleanup or expiration</li> <li>Consider implementing file rotation for production use</li> </ul>"},{"location":"getting-started/#security-considerations","title":"Security Considerations","text":""},{"location":"getting-started/#development_1","title":"Development","text":"<ul> <li>CORS is enabled for all origins</li> <li>No authentication required</li> <li>All endpoints are publicly accessible</li> </ul>"},{"location":"getting-started/#production-recommendations","title":"Production Recommendations","text":"<ol> <li> <p>Restrict CORS origins:    <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://your-domain.com\"],  # Restrict to specific domains\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n</code></pre></p> </li> <li> <p>Add authentication:</p> </li> <li>Implement API keys or JWT tokens</li> <li> <p>Add user authorization for file operations</p> </li> <li> <p>File type restrictions:</p> </li> <li>Validate file types before upload</li> <li> <p>Implement file size limits</p> </li> <li> <p>Rate limiting:</p> </li> <li>Add rate limiting to prevent abuse</li> <li>Implement request quotas</li> </ol>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/#module-not-found-errors","title":"\"Module not found\" errors","text":"<pre><code># Make sure you're in the right directory and dependencies are installed\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#port-already-in-use","title":"Port already in use","text":"<pre><code># Kill processes using the port\nlsof -ti:8000 | xargs kill -9\n</code></pre>"},{"location":"getting-started/#frontend-cant-connect-to-backend","title":"Frontend can't connect to backend","text":"<ul> <li>Check that the backend is running on the correct port</li> <li>Verify <code>REACT_APP_API_URL</code> is set correctly</li> <li>Check for CORS issues in browser developer tools</li> </ul>"},{"location":"getting-started/#file-upload-fails","title":"File upload fails","text":"<ul> <li>Check file permissions in the uploads directory</li> <li>Verify disk space availability</li> <li>Check server logs for detailed error messages</li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ol> <li>Check the server logs for detailed error messages</li> <li>Use browser developer tools to inspect network requests</li> <li>Verify all services are running on the correct ports</li> <li>Check the API documentation for correct request formats</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/#for-developers","title":"For Developers","text":"<ul> <li>Explore the API Reference for detailed endpoint documentation</li> <li>Check the Deployment Guide for production deployment</li> <li>Consider implementing additional features like user authentication</li> </ul>"},{"location":"getting-started/#for-users","title":"For Users","text":"<ul> <li>Start uploading and sharing files</li> <li>Use the web interface for basic operations</li> <li>Integrate with your applications using the REST API</li> </ul>"},{"location":"getting-started/#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Set up automated backups</li> <li>Implement file scanning and security checks</li> <li>Add monitoring and logging</li> <li>Scale with load balancers and multiple instances</li> </ul>"},{"location":"api/delete/","title":"Delete Files","text":"<p>Delete files by their unique identifier.</p>"},{"location":"api/delete/#endpoint","title":"Endpoint","text":"<p>DELETE <code>/delete/{file_id}</code></p>"},{"location":"api/delete/#description","title":"Description","text":"<p>This endpoint allows you to permanently delete a file from the server using its unique UUID. Once deleted, the file cannot be recovered.</p>"},{"location":"api/delete/#request","title":"Request","text":""},{"location":"api/delete/#path-parameters","title":"Path Parameters","text":"Parameter Type Required Description <code>file_id</code> String (UUID) Yes The unique identifier of the file to delete"},{"location":"api/delete/#headers","title":"Headers","text":"<p>No special headers are required for this endpoint.</p>"},{"location":"api/delete/#response","title":"Response","text":""},{"location":"api/delete/#success-response","title":"Success Response","text":"<p>Status Code: <code>200 OK</code></p> <p>Content-Type: <code>application/json</code></p> <pre><code>{\n  \"message\": \"File deleted successfully\"\n}\n</code></pre>"},{"location":"api/delete/#error-responses","title":"Error Responses","text":""},{"location":"api/delete/#file-not-found","title":"File Not Found","text":"<p>Status Code: <code>404 Not Found</code></p> <pre><code>{\n  \"detail\": \"File not found\"\n}\n</code></pre>"},{"location":"api/delete/#server-error","title":"Server Error","text":"<p>Status Code: <code>500 Internal Server Error</code></p> <pre><code>{\n  \"detail\": \"Error deleting file: [error message]\"\n}\n</code></pre>"},{"location":"api/delete/#examples","title":"Examples","text":""},{"location":"api/delete/#delete-file","title":"Delete File","text":"<p>cURL <pre><code>curl -X DELETE \"http://localhost:8000/delete/550e8400-e29b-41d4-a716-446655440000\"\n</code></pre></p> <p>Python <pre><code>import requests\n\nfile_id = \"550e8400-e29b-41d4-a716-446655440000\"\nurl = f\"http://localhost:8000/delete/{file_id}\"\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    print(\"File deleted successfully\")\n    print(response.json())\nelif response.status_code == 404:\n    print(\"File not found\")\nelse:\n    print(f\"Error: {response.json()}\")\n</code></pre></p> <p>JavaScript (Fetch) <pre><code>const fileId = \"550e8400-e29b-41d4-a716-446655440000\";\nfetch(`http://localhost:8000/delete/${fileId}`, {\n  method: 'DELETE'\n})\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    if (data.message) {\n      console.log('Success:', data.message);\n    } else {\n      console.error('Error:', data.detail);\n    }\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre></p>"},{"location":"api/delete/#delete-with-confirmation","title":"Delete with Confirmation","text":"<p>Python with confirmation <pre><code>import requests\n\ndef delete_file_with_confirmation(file_id):\n    # First, get file info\n    list_url = \"http://localhost:8000/files\"\n    response = requests.get(list_url)\n\n    if response.status_code == 200:\n        files = response.json()[\"files\"]\n        file_to_delete = None\n\n        for file in files:\n            if file[\"file_id\"] == file_id:\n                file_to_delete = file\n                break\n\n        if file_to_delete:\n            print(f\"File to delete: {file_to_delete['filename']}\")\n            print(f\"Size: {file_to_delete['size']} bytes\")\n\n            confirm = input(\"Are you sure you want to delete this file? (y/N): \")\n            if confirm.lower() == 'y':\n                delete_url = f\"http://localhost:8000/delete/{file_id}\"\n                delete_response = requests.delete(delete_url)\n\n                if delete_response.status_code == 200:\n                    print(\"File deleted successfully\")\n                else:\n                    print(f\"Error deleting file: {delete_response.json()}\")\n            else:\n                print(\"Delete cancelled\")\n        else:\n            print(\"File not found\")\n    else:\n        print(\"Error retrieving file list\")\n\n# Usage\ndelete_file_with_confirmation(\"550e8400-e29b-41d4-a716-446655440000\")\n</code></pre></p>"},{"location":"api/delete/#batch-delete","title":"Batch Delete","text":"<p>Python batch delete <pre><code>import requests\n\ndef delete_multiple_files(file_ids):\n    results = []\n\n    for file_id in file_ids:\n        url = f\"http://localhost:8000/delete/{file_id}\"\n        response = requests.delete(url)\n\n        if response.status_code == 200:\n            results.append({\"file_id\": file_id, \"status\": \"deleted\"})\n        elif response.status_code == 404:\n            results.append({\"file_id\": file_id, \"status\": \"not_found\"})\n        else:\n            results.append({\"file_id\": file_id, \"status\": \"error\", \"detail\": response.json()})\n\n    return results\n\n# Usage\nfile_ids = [\n    \"550e8400-e29b-41d4-a716-446655440000\",\n    \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\",\n    \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\"\n]\n\nresults = delete_multiple_files(file_ids)\nfor result in results:\n    print(f\"File {result['file_id']}: {result['status']}\")\n</code></pre></p> <p>JavaScript with UI integration <pre><code>async function deleteFileWithUI(fileId) {\n  if (!confirm('Are you sure you want to delete this file?')) {\n    return;\n  }\n\n  try {\n    const response = await fetch(`http://localhost:8000/delete/${fileId}`, {\n      method: 'DELETE'\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      // Remove file from UI\n      const fileElement = document.getElementById(`file-${fileId}`);\n      if (fileElement) {\n        fileElement.remove();\n      }\n\n      // Show success message\n      showNotification('File deleted successfully', 'success');\n    } else {\n      showNotification(`Error: ${data.detail}`, 'error');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    showNotification('Network error occurred', 'error');\n  }\n}\n\nfunction showNotification(message, type) {\n  const notification = document.createElement('div');\n  notification.className = `notification ${type}`;\n  notification.textContent = message;\n  document.body.appendChild(notification);\n\n  setTimeout(() =&gt; {\n    notification.remove();\n  }, 3000);\n}\n</code></pre></p>"},{"location":"api/delete/#implementation-details","title":"Implementation Details","text":"<p>The delete endpoint: - Uses glob pattern matching to find files by UUID prefix - Locates the file using <code>UPLOAD_DIR.glob(f\"{file_id}*\")</code> - Deletes the file using <code>file_path.unlink()</code> - Returns success message or appropriate error - Handles both regular files and text files uniformly</p>"},{"location":"api/delete/#file-matching-logic","title":"File Matching Logic","text":"<p>The server uses the same glob pattern matching as the download endpoint: 1. Search for files matching <code>{file_id}*</code> in the uploads directory 2. Delete the first match (UUIDs should be unique) 3. If no matches found, return 404 error 4. If deletion fails, return 500 error with details</p>"},{"location":"api/delete/#error-handling","title":"Error Handling","text":"<p>The delete endpoint handles several error scenarios: - File not found: Returns 404 when no file matches the UUID - Permission errors: Returns 500 if the file cannot be deleted due to permissions - File system errors: Returns 500 for other file system related errors</p>"},{"location":"api/delete/#notes","title":"Notes","text":"<ul> <li>Permanent deletion: Files are permanently removed from the file system</li> <li>No recovery: There is no way to recover deleted files</li> <li>No authentication: Anyone with the file ID can delete the file</li> <li>Atomic operation: File deletion is atomic - either succeeds completely or fails</li> <li>No cascade effects: Deleting a file doesn't affect other files or operations</li> <li>Consider backups: In production, consider implementing file backup/versioning before deletion</li> </ul>"},{"location":"api/download/","title":"Download Files","text":"<p>Download files by their unique identifier.</p>"},{"location":"api/download/#endpoint","title":"Endpoint","text":"<p>GET <code>/download/{file_id}</code></p>"},{"location":"api/download/#description","title":"Description","text":"<p>This endpoint allows you to download a file using its unique UUID. The server will locate the file and return it as a binary stream with appropriate headers.</p>"},{"location":"api/download/#request","title":"Request","text":""},{"location":"api/download/#path-parameters","title":"Path Parameters","text":"Parameter Type Required Description <code>file_id</code> String (UUID) Yes The unique identifier of the file to download"},{"location":"api/download/#headers","title":"Headers","text":"<p>No special headers are required for this endpoint.</p>"},{"location":"api/download/#response","title":"Response","text":""},{"location":"api/download/#success-response","title":"Success Response","text":"<p>Status Code: <code>200 OK</code></p> <p>Content-Type: <code>application/octet-stream</code></p> <p>Headers: - <code>Content-Disposition: attachment; filename=\"{original_filename}\"</code></p> <p>The response body contains the binary file data.</p>"},{"location":"api/download/#error-response","title":"Error Response","text":"<p>Status Code: <code>404 Not Found</code></p> <pre><code>{\n  \"detail\": \"File not found\"\n}\n</code></pre>"},{"location":"api/download/#examples","title":"Examples","text":""},{"location":"api/download/#download-file-example","title":"Download File Example","text":"<p>cURL <pre><code>curl -X GET \"http://localhost:8000/download/550e8400-e29b-41d4-a716-446655440000\" \\\n  -o downloaded_file.txt\n</code></pre></p> <p>Python <pre><code>import requests\n\nurl = \"http://localhost:8000/download/550e8400-e29b-41d4-a716-446655440000\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    with open(\"downloaded_file.txt\", \"wb\") as f:\n        f.write(response.content)\n    print(\"File downloaded successfully\")\nelse:\n    print(f\"Error: {response.json()}\")\n</code></pre></p> <p>JavaScript (Fetch) <pre><code>const fileId = \"550e8400-e29b-41d4-a716-446655440000\";\nfetch(`http://localhost:8000/download/${fileId}`)\n  .then(response =&gt; {\n    if (response.ok) {\n      return response.blob();\n    }\n    throw new Error('File not found');\n  })\n  .then(blob =&gt; {\n    // Create download link\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'downloaded_file.txt';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre></p>"},{"location":"api/download/#download-with-proper-filename","title":"Download with Proper Filename","text":"<p>Python with filename extraction <pre><code>import requests\nfrom urllib.parse import unquote\n\nurl = \"http://localhost:8000/download/550e8400-e29b-41d4-a716-446655440000\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Extract filename from Content-Disposition header\n    content_disposition = response.headers.get('Content-Disposition', '')\n    if 'filename=' in content_disposition:\n        filename = content_disposition.split('filename=')[1].strip('\"')\n        filename = unquote(filename)\n    else:\n        filename = \"downloaded_file\"\n\n    with open(filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"File downloaded as: {filename}\")\nelse:\n    print(f\"Error: {response.json()}\")\n</code></pre></p>"},{"location":"api/download/#implementation-details","title":"Implementation Details","text":"<p>The download endpoint: - Uses glob pattern matching to find files by UUID prefix - Returns the first matching file (should be unique) - Extracts the original filename from the stored filename pattern - For files: <code>{uuid}_{original_filename}</code> \u2192 <code>{original_filename}</code> - For text files: <code>{uuid}.txt</code> \u2192 <code>{uuid}.txt</code> - Sets <code>Content-Disposition</code> header for proper filename handling - Returns files as <code>application/octet-stream</code> for universal compatibility</p>"},{"location":"api/download/#file-matching-logic","title":"File Matching Logic","text":"<p>The server uses glob pattern matching to find files: 1. Search for files matching <code>{file_id}*</code> in the uploads directory 2. Return the first match (UUIDs should be unique) 3. If no matches found, return 404 error</p>"},{"location":"api/download/#notes","title":"Notes","text":"<ul> <li>Files are served as binary streams regardless of their original type</li> <li>The <code>Content-Disposition</code> header ensures proper filename handling in browsers</li> <li>No authentication is required to download files</li> <li>File access is based solely on knowing the UUID</li> <li>Large files are streamed efficiently without loading into memory</li> </ul>"},{"location":"api/files/","title":"List Files","text":"<p>Retrieve a list of all uploaded files.</p>"},{"location":"api/files/#endpoint","title":"Endpoint","text":"<p>GET <code>/files</code></p>"},{"location":"api/files/#description","title":"Description","text":"<p>This endpoint returns a list of all files currently stored on the server, including their metadata such as file ID, filename, and size.</p>"},{"location":"api/files/#request","title":"Request","text":""},{"location":"api/files/#parameters","title":"Parameters","text":"<p>No parameters are required for this endpoint.</p>"},{"location":"api/files/#headers","title":"Headers","text":"<p>No special headers are required for this endpoint.</p>"},{"location":"api/files/#response","title":"Response","text":""},{"location":"api/files/#success-response","title":"Success Response","text":"<p>Status Code: <code>200 OK</code></p> <p>Content-Type: <code>application/json</code></p> <pre><code>{\n  \"files\": [\n    {\n      \"file_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"filename\": \"example.txt\",\n      \"size\": 1024\n    },\n    {\n      \"file_id\": \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\",\n      \"filename\": \"document.pdf\",\n      \"size\": 2048\n    },\n    {\n      \"file_id\": \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\",\n      \"filename\": \"6ba7b811-9dad-11d1-80b4-00c04fd430c8.txt\",\n      \"size\": 256\n    }\n  ]\n}\n</code></pre>"},{"location":"api/files/#response-fields","title":"Response Fields","text":"Field Type Description <code>files</code> Array List of file objects <code>files[].file_id</code> String Unique identifier (UUID) of the file <code>files[].filename</code> String Original filename or generated name for text files <code>files[].size</code> Number File size in bytes"},{"location":"api/files/#empty-response","title":"Empty Response","text":"<p>If no files are uploaded, the response will be:</p> <pre><code>{\n  \"files\": []\n}\n</code></pre>"},{"location":"api/files/#examples","title":"Examples","text":""},{"location":"api/files/#list-all-files","title":"List All Files","text":"<p>cURL <pre><code>curl -X GET \"http://localhost:8000/files\"\n</code></pre></p> <p>Python <pre><code>import requests\n\nurl = \"http://localhost:8000/files\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    files = data[\"files\"]\n    print(f\"Total files: {len(files)}\")\n    for file in files:\n        print(f\"ID: {file['file_id']}\")\n        print(f\"Name: {file['filename']}\")\n        print(f\"Size: {file['size']} bytes\")\n        print(\"---\")\nelse:\n    print(f\"Error: {response.status_code}\")\n</code></pre></p> <p>JavaScript (Fetch) <pre><code>fetch('http://localhost:8000/files')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    const files = data.files;\n    console.log(`Total files: ${files.length}`);\n    files.forEach(file =&gt; {\n      console.log(`ID: ${file.file_id}`);\n      console.log(`Name: ${file.filename}`);\n      console.log(`Size: ${file.size} bytes`);\n      console.log('---');\n    });\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre></p>"},{"location":"api/files/#process-files-with-metadata","title":"Process Files with Metadata","text":"<p>Python with file processing <pre><code>import requests\n\nurl = \"http://localhost:8000/files\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    files = data[\"files\"]\n\n    # Calculate total size\n    total_size = sum(file[\"size\"] for file in files)\n    print(f\"Total storage used: {total_size} bytes\")\n\n    # Filter by file type\n    text_files = [f for f in files if f[\"filename\"].endswith(\".txt\")]\n    print(f\"Text files: {len(text_files)}\")\n\n    # Sort by size\n    files_by_size = sorted(files, key=lambda x: x[\"size\"], reverse=True)\n    print(\"Largest files:\")\n    for file in files_by_size[:3]:  # Top 3\n        print(f\"  {file['filename']}: {file['size']} bytes\")\n</code></pre></p> <p>JavaScript with file management <pre><code>fetch('http://localhost:8000/files')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    const files = data.files;\n\n    // Create file list UI\n    const fileList = document.getElementById('file-list');\n    fileList.innerHTML = '';\n\n    files.forEach(file =&gt; {\n      const fileItem = document.createElement('div');\n      fileItem.className = 'file-item';\n      fileItem.innerHTML = `\n        &lt;div class=\"file-info\"&gt;\n          &lt;span class=\"filename\"&gt;${file.filename}&lt;/span&gt;\n          &lt;span class=\"filesize\"&gt;${formatFileSize(file.size)}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class=\"file-actions\"&gt;\n          &lt;button onclick=\"downloadFile('${file.file_id}')\"&gt;Download&lt;/button&gt;\n          &lt;button onclick=\"deleteFile('${file.file_id}')\"&gt;Delete&lt;/button&gt;\n        &lt;/div&gt;\n      `;\n      fileList.appendChild(fileItem);\n    });\n  });\n\nfunction formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n</code></pre></p>"},{"location":"api/files/#implementation-details","title":"Implementation Details","text":"<p>The files endpoint: - Scans the <code>uploads/</code> directory for all files - Extracts file ID from the filename prefix (before the first <code>_</code>) - Extracts original filename:   - For regular files: removes UUID prefix (<code>{uuid}_{filename}</code> \u2192 <code>{filename}</code>)   - For text files: keeps full filename (<code>{uuid}.txt</code>) - Calculates file size using <code>file.stat().st_size</code> - Returns all files in a single response (no pagination)</p>"},{"location":"api/files/#file-naming-convention","title":"File Naming Convention","text":"<p>The server uses the following naming convention for stored files: - Regular files: <code>{uuid}_{original_filename}</code> - Text files: <code>{uuid}.txt</code></p> <p>When listing files, the API returns the original filename for regular files and the full generated filename for text files.</p>"},{"location":"api/files/#notes","title":"Notes","text":"<ul> <li>No authentication is required to list files</li> <li>The endpoint returns all files without filtering</li> <li>File sizes are returned in bytes</li> <li>The response does not include creation timestamps or other metadata</li> <li>Large directories may result in longer response times</li> <li>Consider implementing pagination for systems with many files</li> </ul>"},{"location":"api/overview/","title":"API Overview","text":"<p>This section provides a comprehensive overview of the File Transfer Server API endpoints, request/response formats, and authentication requirements.</p>"},{"location":"api/overview/#base-url","title":"Base URL","text":"<p>The API is available at: - Development: <code>http://localhost:8000</code> - Production: <code>https://your-domain.com</code></p>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>Currently, the API does not require authentication. All endpoints are publicly accessible.</p> <p>Production Consideration</p> <p>For production deployments, consider implementing authentication and authorization mechanisms to secure your file transfer operations.</p>"},{"location":"api/overview/#requestresponse-format","title":"Request/Response Format","text":"<p>All API endpoints use JSON format for structured data and multipart/form-data for file uploads.</p>"},{"location":"api/overview/#content-types","title":"Content Types","text":"Endpoint Request Content-Type Response Content-Type <code>POST /upload</code> <code>multipart/form-data</code> <code>application/json</code> <code>GET /download/{file_id}</code> N/A <code>application/octet-stream</code> <code>GET /files</code> N/A <code>application/json</code> <code>DELETE /delete/{file_id}</code> N/A <code>application/json</code>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes to indicate success or failure:</p>"},{"location":"api/overview/#success-codes","title":"Success Codes","text":"<ul> <li>200 OK: Request successful</li> <li>201 Created: Resource created successfully</li> </ul>"},{"location":"api/overview/#error-codes","title":"Error Codes","text":"<ul> <li>400 Bad Request: Invalid request parameters</li> <li>404 Not Found: Resource not found</li> <li>500 Internal Server Error: Server error</li> </ul>"},{"location":"api/overview/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"detail\": \"Error message description\"\n}\n</code></pre>"},{"location":"api/overview/#cors-policy","title":"CORS Policy","text":"<p>The API is configured with CORS (Cross-Origin Resource Sharing) enabled for all origins during development:</p> <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre> <p>Production Security</p> <p>In production, restrict CORS origins to only trusted domains for security.</p>"},{"location":"api/overview/#file-storage","title":"File Storage","text":"<p>Files are stored in the <code>uploads/</code> directory with the following naming convention: - Regular files: <code>{uuid}_{original_filename}</code> - Text content: <code>{uuid}.txt</code></p>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>Currently, no rate limiting is implemented. Consider adding rate limiting for production deployments.</p>"},{"location":"api/overview/#api-endpoints-summary","title":"API Endpoints Summary","text":"Endpoint Method Purpose Authentication /upload POST Upload files or text None /download/{file_id} GET Download file by ID None /files GET List all files None /delete/{file_id} DELETE Delete file by ID None"},{"location":"api/overview/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>FastAPI automatically generates interactive API documentation: - Swagger UI: <code>http://localhost:8000/docs</code> - ReDoc: <code>http://localhost:8000/redoc</code></p>"},{"location":"api/upload/","title":"Upload Files","text":"<p>Upload files or text content to the server.</p>"},{"location":"api/upload/#endpoint","title":"Endpoint","text":"<p>POST <code>/upload</code></p>"},{"location":"api/upload/#description","title":"Description","text":"<p>This endpoint allows you to upload either a file or text content. The server will generate a unique UUID for the uploaded content and store it in the uploads directory.</p>"},{"location":"api/upload/#request","title":"Request","text":""},{"location":"api/upload/#content-type","title":"Content-Type","text":"<p><code>multipart/form-data</code></p>"},{"location":"api/upload/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>file</code> File No* Binary file to upload <code>text</code> String No* Text content to store <p>*Either <code>file</code> or <code>text</code> must be provided, but not both.</p>"},{"location":"api/upload/#file-upload","title":"File Upload","text":"<p>When uploading a file, the server will: 1. Generate a unique UUID for the file 2. Store the file as <code>{uuid}_{original_filename}</code> in the uploads directory 3. Return the file ID and metadata</p>"},{"location":"api/upload/#text-upload","title":"Text Upload","text":"<p>When uploading text content, the server will: 1. Generate a unique UUID for the text 2. Store the text as <code>{uuid}.txt</code> in the uploads directory 3. Return the file ID and metadata</p>"},{"location":"api/upload/#response","title":"Response","text":""},{"location":"api/upload/#success-response","title":"Success Response","text":"<p>Status Code: <code>200 OK</code></p>"},{"location":"api/upload/#file-upload-response","title":"File Upload Response","text":"<pre><code>{\n  \"file_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"filename\": \"example.txt\",\n  \"type\": \"file\"\n}\n</code></pre>"},{"location":"api/upload/#text-upload-response","title":"Text Upload Response","text":"<pre><code>{\n  \"file_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"filename\": \"550e8400-e29b-41d4-a716-446655440000.txt\",\n  \"type\": \"text\"\n}\n</code></pre>"},{"location":"api/upload/#error-response","title":"Error Response","text":"<p>Status Code: <code>400 Bad Request</code></p> <pre><code>{\n  \"detail\": \"Either file or text must be provided\"\n}\n</code></pre>"},{"location":"api/upload/#examples","title":"Examples","text":""},{"location":"api/upload/#file-upload-example","title":"File Upload Example","text":"<p>cURL <pre><code>curl -X POST \"http://localhost:8000/upload\" \\\n  -F \"file=@/path/to/your/file.txt\"\n</code></pre></p> <p>Python <pre><code>import requests\n\nurl = \"http://localhost:8000/upload\"\nfiles = {\"file\": open(\"example.txt\", \"rb\")}\nresponse = requests.post(url, files=files)\nprint(response.json())\n</code></pre></p> <p>JavaScript (Fetch) <pre><code>const formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('http://localhost:8000/upload', {\n  method: 'POST',\n  body: formData\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre></p>"},{"location":"api/upload/#text-upload-example","title":"Text Upload Example","text":"<p>cURL <pre><code>curl -X POST \"http://localhost:8000/upload\" \\\n  -F \"text=Hello, World!\"\n</code></pre></p> <p>Python <pre><code>import requests\n\nurl = \"http://localhost:8000/upload\"\ndata = {\"text\": \"Hello, World!\"}\nresponse = requests.post(url, data=data)\nprint(response.json())\n</code></pre></p> <p>JavaScript (Fetch) <pre><code>const formData = new FormData();\nformData.append('text', 'Hello, World!');\n\nfetch('http://localhost:8000/upload', {\n  method: 'POST',\n  body: formData\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre></p>"},{"location":"api/upload/#implementation-details","title":"Implementation Details","text":"<p>The upload endpoint: - Uses <code>uuid.uuid4()</code> to generate unique file identifiers - Stores files in the <code>uploads/</code> directory - For files: saves as <code>{uuid}_{original_filename}</code> - For text: saves as <code>{uuid}.txt</code> - Returns metadata including file ID, filename, and type</p>"},{"location":"api/upload/#notes","title":"Notes","text":"<ul> <li>Maximum file size is not explicitly limited by the API</li> <li>No file type restrictions are enforced</li> <li>The UUID is used as the primary identifier for all subsequent operations</li> <li>Text content is stored as UTF-8 encoded files</li> </ul>"}]}